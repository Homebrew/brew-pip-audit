[
  {
    "name": "jinja2",
    "version": "2.11.2",
    "vulns": [
      {
        "id": "PYSEC-2021-66",
        "fix_versions": [
          "2.11.3"
        ],
        "description": "This affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation. This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory."
      }
    ]
  },
  {
    "name": "lxml",
    "version": "4.6.3",
    "vulns": [
      {
        "id": "PYSEC-2021-852",
        "fix_versions": [
          "4.6.5"
        ],
        "description": "lxml is a library for processing XML and HTML in the Python language. Prior to version 4.6.5, the HTML Cleaner in lxml.html lets certain crafted script content pass through, as well as script content in SVG files embedded using data URIs. Users that employ the HTML cleaner in a security relevant context should upgrade to lxml 4.6.5 to receive a patch. There are no known workarounds available."
      },
      {
        "id": "PYSEC-2022-230",
        "fix_versions": [
          "4.9.1"
        ],
        "description": "NULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered."
      }
    ]
  },
  {
    "name": "mistune",
    "version": "0.8.4",
    "vulns": [
      {
        "id": "PYSEC-2022-237",
        "fix_versions": [
          "2.0.3"
        ],
        "description": "In mistune through 2.0.2, support of inline markup is implemented by using regular expressions that can involve a high amount of backtracking on certain edge cases. This behavior is commonly named catastrophic backtracking."
      }
    ]
  },
  {
    "name": "pyyaml",
    "version": "5.3.1",
    "vulns": [
      {
        "id": "PYSEC-2021-142",
        "fix_versions": [
          "5.4"
        ],
        "description": "A vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747."
      }
    ]
  },
  {
    "name": "urllib3",
    "version": "1.25.9",
    "vulns": [
      {
        "id": "PYSEC-2021-108",
        "fix_versions": [
          "1.26.5"
        ],
        "description": "An issue was discovered in urllib3 before 1.26.5. When provided with a URL containing many @ characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect."
      }
    ]
  },
  {
    "name": "werkzeug",
    "version": "1.0.1",
    "vulns": [
      {
        "id": "PYSEC-2022-203",
        "fix_versions": [
          "2.1.1"
        ],
        "description": "** DISPUTED ** Improper parsing of HTTP requests in Pallets Werkzeug v2.1.0 and below allows attackers to perform HTTP Request Smuggling using a crafted HTTP request with multiple requests included inside the body. NOTE: the vendor's position is that this behavior can only occur in unsupported configurations involving development mode and an HTTP server from outside the Werkzeug project."
      }
    ]
  }
]