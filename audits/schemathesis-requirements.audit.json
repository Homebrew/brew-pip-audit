[
  {
    "name": "starlette",
    "version": "0.24.0",
    "vulns": [
      {
        "id": "GHSA-74m5-2c7w-9w3x",
        "fix_versions": [
          "0.25.0"
        ],
        "description": "### Impact  The `MultipartParser` using the package `python-multipart` accepts an unlimited number of multipart parts (form fields or files).  Processing too many parts results in high CPU usage and high memory usage, eventually leading to an <abbr title=\"out of memory\">OOM</abbr> process kill.  This can be triggered by sending too many small form fields with no content, or too many empty files.  For this to take effect application code has to:  * Have `python-multipart` installed and * call `request.form()`   * or via another framework like FastAPI, using form field parameters or `UploadFile` parameters, which in turn calls `request.form()`.  ### Patches  The vulnerability is solved in Starlette 0.25.0 by making the maximum fields and files customizable and with a sensible default (1000).   Applications will be secure by just upgrading their Starlette version to 0.25.0 (or FastAPI to 0.92.0).  If application code needs to customize the new max field and file number, there are new `request.form()` parameters (with the default values):  * `max_files=1000` * `max_fields=1000`  ### Workarounds  Applications that don't install `python-multipart` or that don't use form fields are safe.  In older versions, it's also possible to instead of calling `request.form()` call `request.stream()` and parse the form data in internal code.  In most cases, the best solution is to upgrade the Starlette version.  ### References  This was reported in private by @das7pad via internal email. He also coordinated the fix across multiple frameworks and parsers.  The details about how `multipart/form-data` is structured and parsed are in the [RFC 7578](https://www.rfc-editor.org/rfc/rfc7578). "
      }
    ]
  },
  {
    "name": "werkzeug",
    "version": "2.2.2",
    "vulns": [
      {
        "id": "GHSA-px8h-6qxv-m22q",
        "fix_versions": [
          "2.2.3"
        ],
        "description": "Browsers may allow \"nameless\" cookies that look like `=value` instead of `key=value`. A vulnerable browser may allow a compromised application on an adjacent subdomain to exploit this to set a cookie like `=__Host-test=bad` for another subdomain.  Werkzeug <= 2.2.2 will parse the cookie `=__Host-test=bad` as `__Host-test=bad`. If a Werkzeug application is running next to a vulnerable or malicious subdomain which sets such a cookie using a vulnerable browser, the Werkzeug application will see the bad cookie value but the valid cookie key."
      },
      {
        "id": "GHSA-xg9f-g7g7-2323",
        "fix_versions": [
          "2.2.3"
        ],
        "description": "Werkzeug's multipart form data parser will parse an unlimited number of parts, including file parts. Parts can be a small amount of bytes, but each requires CPU time to parse and may use more memory as Python data. If a request can be made to an endpoint that accesses `request.data`, `request.form`, `request.files`, or `request.get_data(parse_form_data=False)`, it can cause unexpectedly high resource usage.  This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. The amount of RAM required can trigger an out of memory kill of the process. Unlimited file parts can use up memory and file handles. If many concurrent requests are sent continuously, this can exhaust or kill all available workers."
      }
    ]
  }
]