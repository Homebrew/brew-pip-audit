[
  {
    "name": "cryptography",
    "version": "2.8",
    "vulns": [
      {
        "id": "PYSEC-2021-62",
        "fix_versions": [
          "3.2.1"
        ],
        "description": "python-cryptography 3.2 is vulnerable to Bleichenbacher timing attacks in the RSA decryption API, via timed processing of valid PKCS#1 v1.5 ciphertext."
      }
    ]
  },
  {
    "name": "jinja2",
    "version": "2.10.1",
    "vulns": [
      {
        "id": "PYSEC-2021-66",
        "fix_versions": [
          "2.11.3"
        ],
        "description": "This affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDoS vulnerability is mainly due to the `_punctuation_re regex` operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation. This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory."
      }
    ]
  },
  {
    "name": "paramiko",
    "version": "2.6.0",
    "vulns": [
      {
        "id": "PYSEC-2022-166",
        "fix_versions": [
          "2.10.1"
        ],
        "description": "In Paramiko before 2.10.1, a race condition (between creation and chmod) in the write_private_key_file function could allow unauthorized information disclosure."
      }
    ]
  },
  {
    "name": "protobuf",
    "version": "3.9.2",
    "vulns": [
      {
        "id": "PYSEC-2022-48",
        "fix_versions": [
          "3.15.0"
        ],
        "description": "Nullptr dereference when a null char is present in a proto symbol. The symbol is parsed incorrectly, leading to an unchecked call into the proto file's name during generation of the resulting error message. Since the symbol is incorrectly parsed, the file is nullptr. We recommend upgrading to version 3.15.0 or greater."
      },
      {
        "id": "GHSA-8gq9-2x98-w8hf",
        "fix_versions": [
          "3.18.3",
          "3.19.5",
          "3.20.2",
          "4.21.6"
        ],
        "description": "### Summary  A message parsing and memory management vulnerability in ProtocolBuffer\u2019s C++ and Python implementations can trigger an out of memory (OOM) failure when processing a specially crafted message, which could lead to a denial of service (DoS) on services using the libraries.  Reporter: [ClusterFuzz](https://google.github.io/clusterfuzz/)  Affected versions: All versions of C++ Protobufs (including Python) prior to the versions listed below.  ### Severity & Impact  **Medium 5.7** - [CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H](https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)  A small (~500 KB) malicious payload can be constructed which causes the running service to allocate more than 3GB of RAM.  ### Proof of Concept  For reproduction details, please refer to the unit test that identifies the specific inputs that exercise this parsing weakness.  ### Mitigation / Patching  Please update to the latest available versions of the following packages: - protobuf-cpp (3.18.3, 3.19.5, 3.20.2, 3.21.6) - protobuf-python (3.18.3, 3.19.5, 3.20.2, 4.21.6)"
      }
    ]
  },
  {
    "name": "psutil",
    "version": "5.6.3",
    "vulns": [
      {
        "id": "PYSEC-2019-41",
        "fix_versions": [
          "5.6.6"
        ],
        "description": "psutil (aka python-psutil) through 5.6.5 can have a double free. This occurs because of refcount mishandling within a while or for loop that converts system data into a Python object."
      }
    ]
  },
  {
    "name": "pyyaml",
    "version": "5.1.2",
    "vulns": [
      {
        "id": "PYSEC-2020-176",
        "fix_versions": [
          "5.2b1"
        ],
        "description": "PyYAML 5.1 through 5.1.2 has insufficient restrictions on the load and load_all functions because of a class deserialization issue, e.g., Popen is a class in the subprocess module. NOTE: this issue exists because of an incomplete fix for CVE-2017-18342."
      },
      {
        "id": "PYSEC-2020-96",
        "fix_versions": [
          "5.3.1"
        ],
        "description": "A vulnerability was discovered in the PyYAML library in versions before 5.3.1, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. An attacker could use this flaw to execute arbitrary code on the system by abusing the python/object/new constructor."
      },
      {
        "id": "PYSEC-2021-142",
        "fix_versions": [
          "5.4"
        ],
        "description": "A vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747."
      }
    ]
  },
  {
    "name": "urllib3",
    "version": "1.25.6",
    "vulns": [
      {
        "id": "PYSEC-2021-108",
        "fix_versions": [
          "1.26.5"
        ],
        "description": "An issue was discovered in urllib3 before 1.26.5. When provided with a URL containing many @ characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect."
      },
      {
        "id": "PYSEC-2020-149",
        "fix_versions": [
          "1.25.8"
        ],
        "description": "The _encode_invalid_chars function in util/url.py in the urllib3 library 1.25.2 through 1.25.7 for Python allows a denial of service (CPU consumption) because of an inefficient algorithm. The percent_encodings array contains all matches of percent encodings. It is not deduplicated. For a URL of length N, the size of percent_encodings may be up to O(N). The next step (normalize existing percent-encoded bytes) also takes up to O(N) for each step, so the total time is O(N^2). If percent_encodings were deduplicated, the time to compute _encode_invalid_chars would be O(kN), where k is at most 484 ((10+6*2)^2)."
      },
      {
        "id": "PYSEC-2020-148",
        "fix_versions": [
          "1.25.9"
        ],
        "description": "urllib3 before 1.25.9 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of putrequest(). NOTE: this is similar to CVE-2020-26116."
      }
    ]
  },
  {
    "name": "websockets",
    "version": "7.0",
    "vulns": [
      {
        "id": "PYSEC-2021-95",
        "fix_versions": [
          "9.1"
        ],
        "description": "The aaugustin websockets library before 9.1 for Python has an Observable Timing Discrepancy on servers when HTTP Basic Authentication is enabled with basic_auth_protocol_factory(credentials=...). An attacker may be able to guess a password via a timing attack."
      }
    ]
  }
]